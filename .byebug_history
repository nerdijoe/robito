c
@user_info.bio
@user_info
c
@user_info.counts[:followed_by]
@user_info.counts
@user_info.count
@user_info
c
@client.user
@client
c
exit
c
@found_post.created_time
@found_post
c
@client
c
@campaign
@influencer
c
@found_post
c
@campaign[:gender]
@campaign.gender
@campagin.gender
c
@influencers
c
@influencers
c
@influencers
c
@campaign.location
@campaign[:gender]
@campaign.age
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@campaign.errors
@campaign
params
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
Influencer.pluck(:gender)
@influencers
c
@influencers.interests
@influencers
c
@influencers
c
@search.keyword.present?
@search.keyword.presetn?
@search
params
c
cc
c
rails g migration changce_type_age_to_string_in_searches
rails g migration change_type_age_to_string_in_searches
@influencers
c
cc
c
@influencers
c
@influencers
c
@influencers
c
@influencers
c
@campaign.check_status(3)
@campaign.check_status
@campaign.requests.find_by(influencer_id: 3).status
@campaign.requests.find_by(influencer_id: 3)
@campaign.requests
@campaign.check_status(1)
c
@client.user.full_name
@client.user
@client
c
exit
@reward = Reward.destroy(params[:id])
 @campaign = Campaign.find(params[:campaign_id])
current_user.influencer.id
current.user.influencer.id
request
request.campaign_id
request
c
request
c
params
c
params[:request][:status]
params[:request]
params
c
Request.where(campaign_id: 5).count
Request.where(campaign_id: 5)
c
Request.where(campaign_id: 5).count
Request.where(campaign_id: 5)
Request.all
c
params[:influencer_id]
params[:campaign_id]
params
c
i.user
i
c
params
exit
params
exit
params
exit
params
exit
params
c
@campaign
@rewards
c
params
c
params
reward_if
@reward
c
params
c
params
c
Campaign.where(brand_id: params[:brand_id])
c
params
c
@client.user_search("fcl.zl")
@client.user_search("janechuck")
@client.user_search("nerdijoe")
@client.user_search("bellakuan")
@client.user_search("bella kuan")
@client.user_search
@client.user_followed_by(187611459)
Instagram.user_followed_by(187611459)
@client.user_followed_by(@influencer.user.identities.first.uid)
@influencer.user.identities.first
@client.user_followed_by(@influencer.user.identities.first.
@client.user_followed_by
c
@client.user_followed_by
@client.subscriptions
@client.subscription
@client = Instagram.client(access_token: @influencer.user.instagram.accesstoken, client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
@client.subscriptions(client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
@influencer.user.identities
@influencer
@client.subscriptions(client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
ENV['INSTAGRAM_APP_SECRET']
@client.subscriptions(client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
@client.subscriptions(client_secret: ENV['INSTAGRAM_APP_SECRET'])
@client.subscription(client_secret: ENV['INSTAGRAM_APP_SECRET'])
response
response.headers
response = @client.utils_raw_response
@client.utils_raw_response
@client.utils_rw_response
@client.client_secret = EN
@client.subscriptions
@client
c
@client
@client.subscriptions
@client.subcriptions
c
@found_post.likes.fetch(:count)
@found_post.likes.fetch(count)
@found_post.likes
@found_post.likes(count)
@found_post.likes[count]
@found_post.likes
@found_post.likes.count
@found_post.likes
@found_post
c
@found_post.images.low_resolution.url
@found_post.images.low_resolution
@found_post.images
@found_post
c
@found_post
c
m.tags
c
m.tags
c
m.tags
c
m.tags
m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
m.tag
c
m.tag
c
m.tag
c
m.tags
c
m.tags
