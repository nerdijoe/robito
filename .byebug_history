c
exit
@reward = Reward.destroy(params[:id])
 @campaign = Campaign.find(params[:campaign_id])
current_user.influencer.id
current.user.influencer.id
request
request.campaign_id
request
c
request
c
params
c
params[:request][:status]
params[:request]
params
c
Request.where(campaign_id: 5).count
Request.where(campaign_id: 5)
c
Request.where(campaign_id: 5).count
Request.where(campaign_id: 5)
Request.all
c
params[:influencer_id]
params[:campaign_id]
params
c
i.user
i
c
params
exit
params
exit
params
exit
params
exit
params
c
@campaign
@rewards
c
params
c
params
reward_if
@reward
c
params
c
params
c
Campaign.where(brand_id: params[:brand_id])
c
params
c
@client.user_search("fcl.zl")
@client.user_search("janechuck")
@client.user_search("nerdijoe")
@client.user_search("bellakuan")
@client.user_search("bella kuan")
@client.user_search
@client.user_followed_by(187611459)
Instagram.user_followed_by(187611459)
@client.user_followed_by(@influencer.user.identities.first.uid)
@influencer.user.identities.first
@client.user_followed_by(@influencer.user.identities.first.
@client.user_followed_by
c
@client.user_followed_by
@client.subscriptions
@client.subscription
@client = Instagram.client(access_token: @influencer.user.instagram.accesstoken, client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
@client.subscriptions(client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
@influencer.user.identities
@influencer
@client.subscriptions(client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
ENV['INSTAGRAM_APP_SECRET']
@client.subscriptions(client_id: ENV['INSTAGRAM_APP_ID'], client_secret: ENV['INSTAGRAM_APP_SECRET'])
@client.subscriptions(client_secret: ENV['INSTAGRAM_APP_SECRET'])
@client.subscription(client_secret: ENV['INSTAGRAM_APP_SECRET'])
response
response.headers
response = @client.utils_raw_response
@client.utils_raw_response
@client.utils_rw_response
@client.client_secret = EN
@client.subscriptions
@client
c
@client
@client.subscriptions
@client.subcriptions
c
@found_post.likes.fetch(:count)
@found_post.likes.fetch(count)
@found_post.likes
@found_post.likes(count)
@found_post.likes[count]
@found_post.likes
@found_post.likes.count
@found_post.likes
@found_post
c
@found_post.images.low_resolution.url
@found_post.images.low_resolution
@found_post.images
@found_post
c
@found_post
c
m.tags
c
m.tags
c
m.tags
c
m.tags
m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
 m.tag
c
m.tag
c
m.tag
c
m.tag
c
m.tags
c
m.tags
c
m.tags
c
m.tags
c
m.tags
c
m.tags
c
m.tags.include?("happyholidays")
m.tags.include?("happy")
m.tags.include?(tag)
m.tags
c
@found
c
@client
@recent
@client.user_recent_media
@client.user_media_feed
c
@client.user.profile_picture
@client.user.full_name
@client.user.counts.full_name
@client.user.counts.media
@client.user.counts.followed_by
@client.user.followed_by
@client.user
@client.likes
@client
c
User.all
Brand.all
c
current_user.Brand?
current_user.brand
current_user
Brand.all
Brand
c
current_user
c
current_user.Brand?
current_user.brand?
current_user
c
current_user.brand
current_user.brand.id
@campaign
c
current_user
c
params
@user
c
current_user.campaigns.new
c
current_user.campaigns.new
current_user.campaigns
current_user
c
current_user
c
current_user
c
@campaign
c
params
c
@campaign
c
q
@campaign
@campaign.errors
@campaign.save
 @campaign = current_user.campaigns.new(campaigns_params)
current_user.campaigns.new(campaigns_params)
current_user
campaigns_params
c
current_user
@user
c
@campaign
c
@campaign = current_user.campaigns.new
user.identities.where(provider: 'instagram').first.name
user.identities.where(provider: 'instagram').first
user.identities.where(provider: 'instagram')
user.identities.first
user.identities
user
c
@influencers
c
u.identities.where(provider: 'instagram').first
c
@influencers.first.identities.where(provider: 'instagram').first
u.identities.where(provider: 'instagram').first
c
@influencers.first.identities.firstc
@influencers.first.identities.first
@influencers.identities.first
@influencers.nick
@influencers.user
@influencers
c
@influencers.first.identitiesc
@influencers.first.identities
@influencers.first
@influencers
c
